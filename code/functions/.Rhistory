point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
expect_length(minkowski(point1, point2, p = 1), 1)
expect_type(minkowski(point1, point2, p = 1), 'double')
expect_error(minkowski(point4, point5, p =1))
expect_error(minkowski(point1, point2, p = 0.5))
expect_error(minkowski(point1, point2, p = 'min'))
})
minkowski = function(x, y, p= 1){
if(length(x) != length(y)){
stop("x and y have different lengths")
}
if(is.numeric(a) & p<=1){
stop("p cannot be less than 1")
}
if(is.character(p) & p != "max"){
stop("invalid character value for p")
}
sum = 0
for(i in 1:length(y)){
sum = sum + (abs(x[i]-y[i]))^p
}
dis = sum^(1/p)
return (dis)
}
library("testthat")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
expect_length(minkowski(point1, point2, p = 1), 1)
expect_type(minkowski(point1, point2, p = 1), 'double')
expect_error(minkowski(point4, point5, p =1))
expect_error(minkowski(point1, point2, p = 0.5))
expect_error(minkowski(point1, point2, p = 'min'))
})
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
#expect_equal(minkowski(point1, point3, p = 2), 2)
#expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
#expect_equal(minkowski(point1, point3, p = 2), 2)
#expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
#expect_equal(minkowski(point1, point3, p = 2), 2)
#expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
source("functions.R")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
#expect_equal(minkowski(point1, point3, p = 2), 2)
#expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_file("tests.R")
setwd("~/Desktop/133/workout02/code/functions")
test_file("../tests/test-minkowski.R")
test_file("../tests/test-minkowski.R")
library("testthat")
source("functions.R")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
expect_length(minkowski(point1, point2, p = 1), 1)
expect_type(minkowski(point1, point2, p = 1), 'double')
expect_error(minkowski(point4, point5, p =1))
expect_error(minkowski(point1, point2, p = 0.5))
expect_error(minkowski(point1, point2, p = 'min'))
})
test_file("../tests/test-minkowski.R")
test_file("../tests/test-minkowski.R")
test_file("../tests/test-minkowski.R")
test_file("../tests/test-minkowski.R")
library("testthat")
source("minkowski.R")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
library("testthat")
source("../functions/minkowski.R")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_file("../tests/test-minkowski.R")
library("testthat")
source("./minkowski.R")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_file("../tests/test-minkowski.R")
library("testthat")
source("./minkowski.R")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_file("../tests/test-minkowski.R")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_file("../tests/test-minkowski.R")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_file("../tests/test-minkowski.R")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
minkowski = function(x, y, p = 1) {
if(length(x) != length(y)) {
stop("x and y have different lengths")
}
if(is.numeric(p) && p<1) {
stop("p cannot be less than 1")
}
if(is.character(p) && p != "max") {
stop("invalid character value for p")
}
sum = 0
for(i in 1:length(y)){
sum = sum + (abs(x[i]-y[i]))^p
}
dis = sum^(1/p)
return (dis)
}
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
a = "asdf"
a =  1
a
a = "asdf"
a == "asdf"
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
library("testthat")
source("../functions/minkowski.R")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
library("testthat")
source("../functions/minkowski.R")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
library("testthat")
source("../functions/minkowski.R")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
library("testthat")
source("../functions/minkowski.R")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
#expect_length(minkowski(point1, point2, p = 1), 1)
#expect_type(minkowski(point1, point2, p = 1), 'double')
#expect_error(minkowski(point4, point5, p =1))
#expect_error(minkowski(point1, point2, p = 0.5))
#expect_error(minkowski(point1, point2, p = 'min'))
})
library("testthat")
source("../functions/minkowski.R")
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 = c(0, 0)
point2 = c(1, 1)
point3 = sqrt(c(2, 2))
point4 = c(0, 1)
point5 = c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
expect_length(minkowski(point1, point2, p = 1), 1)
expect_type(minkowski(point1, point2, p = 1), 'double')
expect_error(minkowski(point4, point5, p =1))
expect_error(minkowski(point1, point2, p = 0.5))
expect_error(minkowski(point1, point2, p = 'min'))
})
test_file("../tests/test-minkowski.R")
test_file("../tests/test-minkowski.R")
test_file("../tests/test-minkowski.R")
minkowski(point4, point5, p =1)
point4 = c(0,1)
point5 = c(1,1,1)
minkowski(point4, point5, p =1)
